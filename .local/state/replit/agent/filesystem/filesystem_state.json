{"file_contents":{"manage.py":{"content":"#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'libraryms.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n","size_bytes":665},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"django>=5.2.6\",\n    \"pillow>=11.3.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"python-decouple>=3.8\",\n]\n","size_bytes":246},"libraryms/__init__.py":{"content":"","size_bytes":0},"libraryms/asgi.py":{"content":"\"\"\"\nASGI config for libraryms project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.2/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'libraryms.settings')\n\napplication = get_asgi_application()\n","size_bytes":395},"libraryms/settings.py":{"content":"\"\"\"\nDjango settings for libraryms project.\n\nGenerated by 'django-admin startproject' using Django 5.2.6.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.2/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.2/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\nimport os\nfrom decouple import config\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-5=6g+u9*+#9otbfasb4+js9qklhvzqskg3&$$szq%)5qbbj%ob'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n# CSRF trusted origins\nCSRF_TRUSTED_ORIGINS = [\n    'https://3e199f32-57ac-49ef-8316-8c068bb8da4f-00-1w4vq19hquwh0.kirk.replit.dev',\n    'https://*.replit.dev',\n]\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'students',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'libraryms.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'libraryms.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.getenv('PGDATABASE'),\n        'USER': os.getenv('PGUSER'),\n        'PASSWORD': os.getenv('PGPASSWORD'),\n        'HOST': os.getenv('PGHOST'),\n        'PORT': os.getenv('PGPORT'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\n# Login URLs\nLOGIN_URL = '/login/'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/login/'\n","size_bytes":3852},"libraryms/urls.py":{"content":"\"\"\"\nURL configuration for libraryms project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.2/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('students.urls')),\n]\n\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n","size_bytes":991},"libraryms/wsgi.py":{"content":"\"\"\"\nWSGI config for libraryms project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'libraryms.settings')\n\napplication = get_wsgi_application()\n","size_bytes":395},"students/__init__.py":{"content":"","size_bytes":0},"students/admin.py":{"content":"from django.contrib import admin\nfrom .models import Student, Admission, Locker, Payment, ContactLead\n\n@admin.register(Student)\nclass StudentAdmin(admin.ModelAdmin):\n    list_display = ['name', 'email', 'mobile', 'status', 'registration_fees', 'created_at']\n    list_filter = ['status', 'created_at']\n    search_fields = ['name', 'email', 'mobile', 'aadhaar_number']\n    readonly_fields = ['created_at', 'updated_at']\n    fieldsets = (\n        ('Personal Information', {\n            'fields': ('name', 'email', 'mobile', 'date_of_birth', 'aadhaar_number', 'address', 'photo')\n        }),\n        ('Parent Information', {\n            'fields': ('father_name', 'mother_name', 'parent_mobile')\n        }),\n        ('Registration', {\n            'fields': ('registration_fees', 'status')\n        }),\n        ('Timestamps', {\n            'fields': ('created_at', 'updated_at'),\n            'classes': ('collapse',)\n        })\n    )\n\n@admin.register(Admission)\nclass AdmissionAdmin(admin.ModelAdmin):\n    list_display = ['student', 'seat_number', 'start_date', 'end_date', 'slot_timing', 'admission_fees']\n    list_filter = ['slot_timing', 'seat_type', 'start_date', 'end_date']\n    search_fields = ['student__name', 'seat_number']\n    readonly_fields = ['created_at', 'updated_at']\n\n@admin.register(Locker)\nclass LockerAdmin(admin.ModelAdmin):\n    list_display = ['locker_number', 'student', 'required', 'start_date', 'end_date', 'monthly_fees']\n    list_filter = ['required', 'start_date', 'end_date']\n    search_fields = ['locker_number', 'student__name']\n    readonly_fields = ['created_at', 'updated_at']\n\n@admin.register(Payment)\nclass PaymentAdmin(admin.ModelAdmin):\n    list_display = ['student', 'amount', 'payment_date', 'payment_mode', 'payment_type']\n    list_filter = ['payment_mode', 'payment_type', 'payment_date']\n    search_fields = ['student__name']\n    readonly_fields = ['created_at', 'updated_at']\n    date_hierarchy = 'payment_date'\n\n@admin.register(ContactLead)\nclass ContactLeadAdmin(admin.ModelAdmin):\n    list_display = ['name', 'email', 'mobile', 'status', 'created_at']\n    list_filter = ['status', 'created_at']\n    search_fields = ['name', 'email', 'mobile']\n    readonly_fields = ['created_at', 'updated_at']\n","size_bytes":2234},"students/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass StudentsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'students'\n","size_bytes":148},"students/models.py":{"content":"from django.db import models\nfrom django.core.validators import RegexValidator\nfrom django.contrib.auth.models import User\nimport os\n\nclass Student(models.Model):\n    SEAT_CHOICES = [\n        ('Reserved', 'Reserved'),\n        ('Non-Reserved', 'Non-Reserved'),\n    ]\n    \n    STATUS_CHOICES = [\n        ('Active', 'Active'),\n        ('Inactive', 'Inactive'),\n        ('Expiring Soon', 'Expiring Soon'),\n    ]\n    \n    # Personal Information\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    mobile = models.CharField(max_length=15, validators=[RegexValidator(regex=r'^\\+?1?\\d{9,15}$')])\n    date_of_birth = models.DateField()\n    aadhaar_number = models.CharField(max_length=12, validators=[RegexValidator(regex=r'^\\d{12}$')])\n    address = models.TextField()\n    photo = models.ImageField(upload_to='student_photos/', blank=True, null=True)\n    \n    # Parent Information\n    father_name = models.CharField(max_length=100)\n    mother_name = models.CharField(max_length=100)\n    parent_mobile = models.CharField(max_length=15, validators=[RegexValidator(regex=r'^\\+?1?\\d{9,15}$')])\n    \n    # Registration\n    registration_fees = models.DecimalField(max_digits=10, decimal_places=2, default=200.00)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Active')\n    \n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    def __str__(self):\n        return f\"{self.name} - {self.email}\"\n    \n    class Meta:\n        ordering = ['-created_at']\n\nclass Admission(models.Model):\n    HOUR_CHOICES = [\n        ('1', '1 Hour'),\n        ('2', '2 Hours'),\n        ('3', '3 Hours'),\n        ('4', '4 Hours'),\n        ('6', '6 Hours'),\n        ('8', '8 Hours'),\n    ]\n    \n    SLOT_CHOICES = [\n        ('Morning', 'Morning (6:00 AM - 12:00 PM)'),\n        ('Afternoon', 'Afternoon (12:00 PM - 6:00 PM)'),\n        ('Evening', 'Evening (6:00 PM - 10:00 PM)'),\n        ('Night', 'Night (10:00 PM - 6:00 AM)'),\n    ]\n    \n    student = models.ForeignKey(Student, on_delete=models.CASCADE, related_name='admissions')\n    start_date = models.DateField()\n    end_date = models.DateField()\n    hours = models.CharField(max_length=2, choices=HOUR_CHOICES, default='2')\n    slot_timing = models.CharField(max_length=20, choices=SLOT_CHOICES, default='Morning')\n    seat_number = models.CharField(max_length=10)\n    seat_type = models.CharField(max_length=20, choices=Student.SEAT_CHOICES, default='Non-Reserved')\n    admission_fees = models.DecimalField(max_digits=10, decimal_places=2, default=1900.00)\n    \n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    def __str__(self):\n        return f\"{self.student.name} - Seat {self.seat_number} ({self.start_date} to {self.end_date})\"\n    \n    class Meta:\n        ordering = ['-created_at']\n\nclass Locker(models.Model):\n    student = models.ForeignKey(Student, on_delete=models.CASCADE, related_name='lockers')\n    required = models.BooleanField()\n    security_fees = models.DecimalField(max_digits=10, decimal_places=2, default=300.00)\n    start_date = models.DateField()\n    end_date = models.DateField()\n    locker_number = models.CharField(max_length=10, unique=True)\n    monthly_fees = models.DecimalField(max_digits=10, decimal_places=2, default=100.00)\n    \n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    def __str__(self):\n        return f\"Locker {self.locker_number} - {self.student.name}\"\n    \n    class Meta:\n        ordering = ['locker_number']\n\nclass Payment(models.Model):\n    PAYMENT_MODE_CHOICES = [\n        ('Cash', 'Cash'),\n        ('Online', 'Online'),\n        ('Card', 'Card'),\n        ('UPI', 'UPI'),\n    ]\n    \n    PAYMENT_TYPE_CHOICES = [\n        ('Registration', 'Registration Fees'),\n        ('Admission', 'Admission Fees'),\n        ('Locker', 'Locker Fees'),\n        ('Monthly', 'Monthly Fees'),\n    ]\n    \n    student = models.ForeignKey(Student, on_delete=models.CASCADE, related_name='payments')\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    payment_date = models.DateField()\n    payment_mode = models.CharField(max_length=20, choices=PAYMENT_MODE_CHOICES, default='Cash')\n    payment_type = models.CharField(max_length=20, choices=PAYMENT_TYPE_CHOICES, default='Registration')\n    remarks = models.TextField(blank=True, null=True)\n    \n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    def __str__(self):\n        return f\"{self.student.name} - ₹{self.amount} ({self.payment_type})\"\n    \n    class Meta:\n        ordering = ['-payment_date']\n\nclass ContactLead(models.Model):\n    STATUS_CHOICES = [\n        ('New', 'New'),\n        ('Contacted', 'Contacted'),\n        ('Interested', 'Interested'),\n        ('Converted', 'Converted'),\n        ('Not Interested', 'Not Interested'),\n    ]\n    \n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    mobile = models.CharField(max_length=15, validators=[RegexValidator(regex=r'^\\+?1?\\d{9,15}$')])\n    message = models.TextField(blank=True, null=True)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='New')\n    \n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    def __str__(self):\n        return f\"{self.name} - {self.status}\"\n    \n    class Meta:\n        ordering = ['-created_at']\n","size_bytes":5552},"students/tests.py":{"content":"from django.test import TestCase\n\n# Create your tests here.\n","size_bytes":60},"students/urls.py":{"content":"from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.dashboard, name='dashboard'),\n    path('login/', views.user_login, name='login'),\n    path('logout/', views.user_logout, name='logout'),\n    path('students/', views.students_list, name='students_list'),\n    path('students/create/', views.student_create, name='student_create'),\n    path('students/<int:student_id>/', views.student_detail, name='student_detail'),\n    path('students/<int:student_id>/edit/', views.student_update, name='student_update'),\n    path('students/<int:student_id>/delete/', views.student_delete, name='student_delete'),\n    path('students/<int:student_id>/admission/', views.admission_create, name='admission_create'),\n    path('students/<int:student_id>/locker/', views.locker_create, name='locker_create'),\n    path('students/<int:student_id>/payment/', views.payment_create, name='payment_create'),\n    path('lockers/<int:locker_id>/edit/', views.locker_update, name='locker_update'),\n    path('lockers/<int:locker_id>/delete/', views.locker_delete, name='locker_delete'),\n    path('payments/<int:payment_id>/edit/', views.payment_update, name='payment_update'),\n    path('payments/<int:payment_id>/delete/', views.payment_delete, name='payment_delete'),\n    path('leads/', views.contact_leads, name='contact_leads'),\n    path('finance/', views.finance_dashboard, name='finance_dashboard'),\n]","size_bytes":1405},"students/views.py":{"content":"from django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib import messages\nfrom django.http import JsonResponse\nfrom django.db.models import Sum, Count, Q\nfrom datetime import datetime, timedelta\nfrom .models import Student, Admission, Locker, Payment, ContactLead\nfrom django.core.paginator import Paginator\n\ndef user_login(request):\n    if request.method == 'POST':\n        username = request.POST['username']\n        password = request.POST['password']\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect('dashboard')\n        else:\n            messages.error(request, 'Invalid credentials')\n    return render(request, 'login.html')\n\ndef user_logout(request):\n    logout(request)\n    return redirect('login')\n\n@login_required\ndef dashboard(request):\n    # Finance calculations\n    total_registration = Payment.objects.filter(payment_type='Registration').aggregate(Sum('amount'))['amount__sum'] or 0\n    total_admission = Payment.objects.filter(payment_type='Admission').aggregate(Sum('amount'))['amount__sum'] or 0\n    total_locker = Payment.objects.filter(payment_type='Locker').aggregate(Sum('amount'))['amount__sum'] or 0\n    total_revenue = total_registration + total_admission + total_locker\n    \n    # Student counts\n    total_students = Student.objects.count()\n    active_students = Student.objects.filter(status='Active').count()\n    inactive_students = Student.objects.filter(status='Inactive').count()\n    expiring_soon = Student.objects.filter(status='Expiring Soon').count()\n    \n    context = {\n        'total_revenue': total_revenue,\n        'total_registration': total_registration,\n        'total_admission': total_admission,\n        'total_locker': total_locker,\n        'total_students': total_students,\n        'active_students': active_students,\n        'inactive_students': inactive_students,\n        'expiring_soon': expiring_soon,\n    }\n    return render(request, 'dashboard.html', context)\n\n@login_required\ndef students_list(request):\n    filter_type = request.GET.get('filter', 'all')\n    \n    if filter_type == 'active':\n        students = Student.objects.filter(status='Active')\n    elif filter_type == 'inactive':\n        students = Student.objects.filter(status='Inactive')\n    elif filter_type == 'expiring':\n        students = Student.objects.filter(status='Expiring Soon')\n    elif filter_type == 'reserved':\n        students = Student.objects.filter(admissions__seat_type='Reserved').distinct()\n    elif filter_type == 'non_reserved':\n        students = Student.objects.filter(admissions__seat_type='Non-Reserved').distinct()\n    else:\n        students = Student.objects.all()\n    \n    paginator = Paginator(students, 20)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)\n    \n    context = {\n        'students': page_obj,\n        'filter_type': filter_type,\n    }\n    return render(request, 'students/list.html', context)\n\n@login_required\ndef student_detail(request, student_id):\n    student = get_object_or_404(Student, id=student_id)\n    admissions = student.admissions.all()\n    lockers = student.lockers.all()\n    payments = student.payments.all()\n    \n    context = {\n        'student': student,\n        'admissions': admissions,\n        'lockers': lockers,\n        'payments': payments,\n    }\n    return render(request, 'students/detail.html', context)\n\n@login_required\ndef student_create(request):\n    if request.method == 'POST':\n        try:\n            student = Student.objects.create(\n                name=request.POST['name'],\n                email=request.POST['email'],\n                mobile=request.POST['mobile'],\n                date_of_birth=request.POST['date_of_birth'],\n                aadhaar_number=request.POST['aadhaar_number'],\n                address=request.POST['address'],\n                father_name=request.POST['father_name'],\n                mother_name=request.POST['mother_name'],\n                parent_mobile=request.POST['parent_mobile'],\n                registration_fees=request.POST.get('registration_fees', 200.00),\n                photo=request.FILES.get('photo')\n            )\n            messages.success(request, 'Student added successfully!')\n            return redirect('student_detail', student_id=student.id)\n        except Exception as e:\n            messages.error(request, f'Error creating student: {str(e)}')\n    \n    return render(request, 'students/create.html')\n\n@login_required\ndef student_update(request, student_id):\n    student = get_object_or_404(Student, id=student_id)\n    \n    if request.method == 'POST':\n        try:\n            student.name = request.POST['name']\n            student.email = request.POST['email']\n            student.mobile = request.POST['mobile']\n            student.date_of_birth = request.POST['date_of_birth']\n            student.aadhaar_number = request.POST['aadhaar_number']\n            student.address = request.POST['address']\n            student.father_name = request.POST['father_name']\n            student.mother_name = request.POST['mother_name']\n            student.parent_mobile = request.POST['parent_mobile']\n            student.registration_fees = request.POST.get('registration_fees', 200.00)\n            student.status = request.POST['status']\n            \n            if request.FILES.get('photo'):\n                student.photo = request.FILES['photo']\n                \n            student.save()\n            messages.success(request, 'Student updated successfully!')\n            return redirect('student_detail', student_id=student.id)\n        except Exception as e:\n            messages.error(request, f'Error updating student: {str(e)}')\n    \n    context = {'student': student}\n    return render(request, 'students/edit.html', context)\n\n@login_required\ndef student_delete(request, student_id):\n    student = get_object_or_404(Student, id=student_id)\n    \n    if request.method == 'POST':\n        try:\n            student.delete()\n            messages.success(request, 'Student deleted successfully!')\n            return redirect('students_list')\n        except Exception as e:\n            messages.error(request, f'Error deleting student: {str(e)}')\n            return redirect('student_detail', student_id=student_id)\n    \n    context = {'student': student}\n    return render(request, 'students/confirm_delete.html', context)\n\n@login_required\ndef admission_create(request, student_id):\n    student = get_object_or_404(Student, id=student_id)\n    \n    if request.method == 'POST':\n        try:\n            admission = Admission.objects.create(\n                student=student,\n                start_date=request.POST['start_date'],\n                end_date=request.POST['end_date'],\n                hours=request.POST['hours'],\n                slot_timing=request.POST['slot_timing'],\n                seat_number=request.POST['seat_number'],\n                seat_type=request.POST['seat_type'],\n                admission_fees=request.POST.get('admission_fees', 1900.00)\n            )\n            messages.success(request, 'Admission details added successfully!')\n            return redirect('student_detail', student_id=student.id)\n        except Exception as e:\n            messages.error(request, f'Error creating admission: {str(e)}')\n    \n    context = {'student': student}\n    return render(request, 'admissions/create.html', context)\n\n@login_required\ndef locker_create(request, student_id):\n    student = get_object_or_404(Student, id=student_id)\n    \n    if request.method == 'POST':\n        try:\n            locker = Locker.objects.create(\n                student=student,\n                required=request.POST.get('required') == 'on',\n                security_fees=request.POST.get('security_fees', 300.00),\n                start_date=request.POST['start_date'],\n                end_date=request.POST['end_date'],\n                locker_number=request.POST['locker_number'],\n                monthly_fees=request.POST.get('monthly_fees', 100.00)\n            )\n            messages.success(request, 'Locker assigned successfully!')\n            return redirect('student_detail', student_id=student.id)\n        except Exception as e:\n            messages.error(request, f'Error creating locker: {str(e)}')\n    \n    context = {'student': student}\n    return render(request, 'lockers/create.html', context)\n\n@login_required\ndef locker_update(request, locker_id):\n    locker = get_object_or_404(Locker, id=locker_id)\n    \n    if request.method == 'POST':\n        try:\n            locker.required = request.POST.get('required') == 'on'\n            locker.security_fees = request.POST.get('security_fees', 300.00)\n            locker.start_date = request.POST['start_date']\n            locker.end_date = request.POST['end_date']\n            locker.locker_number = request.POST['locker_number']\n            locker.monthly_fees = request.POST.get('monthly_fees', 100.00)\n            \n            locker.save()\n            messages.success(request, 'Locker updated successfully!')\n            return redirect('student_detail', student_id=locker.student.id)\n        except Exception as e:\n            messages.error(request, f'Error updating locker: {str(e)}')\n    \n    context = {'locker': locker, 'student': locker.student}\n    return render(request, 'lockers/edit.html', context)\n\n@login_required\ndef locker_delete(request, locker_id):\n    locker = get_object_or_404(Locker, id=locker_id)\n    student_id = locker.student.id\n    \n    if request.method == 'POST':\n        try:\n            locker.delete()\n            messages.success(request, 'Locker removed successfully!')\n            return redirect('student_detail', student_id=student_id)\n        except Exception as e:\n            messages.error(request, f'Error deleting locker: {str(e)}')\n            return redirect('student_detail', student_id=student_id)\n    \n    context = {'locker': locker, 'student': locker.student}\n    return render(request, 'lockers/confirm_delete.html', context)\n\n@login_required\ndef payment_create(request, student_id):\n    student = get_object_or_404(Student, id=student_id)\n    \n    if request.method == 'POST':\n        try:\n            payment = Payment.objects.create(\n                student=student,\n                amount=request.POST['amount'],\n                payment_date=request.POST['payment_date'],\n                payment_mode=request.POST['payment_mode'],\n                payment_type=request.POST['payment_type'],\n                remarks=request.POST.get('remarks', '')\n            )\n            messages.success(request, 'Payment recorded successfully!')\n            return redirect('student_detail', student_id=student.id)\n        except Exception as e:\n            messages.error(request, f'Error recording payment: {str(e)}')\n    \n    context = {'student': student}\n    return render(request, 'payments/create.html', context)\n\n@login_required\ndef payment_update(request, payment_id):\n    payment = get_object_or_404(Payment, id=payment_id)\n    \n    if request.method == 'POST':\n        try:\n            payment.amount = request.POST['amount']\n            payment.payment_date = request.POST['payment_date']\n            payment.payment_mode = request.POST['payment_mode']\n            payment.payment_type = request.POST['payment_type']\n            payment.remarks = request.POST.get('remarks', '')\n            \n            payment.save()\n            messages.success(request, 'Payment updated successfully!')\n            return redirect('student_detail', student_id=payment.student.id)\n        except Exception as e:\n            messages.error(request, f'Error updating payment: {str(e)}')\n    \n    context = {'payment': payment, 'student': payment.student}\n    return render(request, 'payments/edit.html', context)\n\n@login_required\ndef payment_delete(request, payment_id):\n    payment = get_object_or_404(Payment, id=payment_id)\n    student_id = payment.student.id\n    \n    if request.method == 'POST':\n        try:\n            payment.delete()\n            messages.success(request, 'Payment deleted successfully!')\n            return redirect('student_detail', student_id=student_id)\n        except Exception as e:\n            messages.error(request, f'Error deleting payment: {str(e)}')\n            return redirect('student_detail', student_id=student_id)\n    \n    context = {'payment': payment, 'student': payment.student}\n    return render(request, 'payments/confirm_delete.html', context)\n\n@login_required\ndef contact_leads(request):\n    leads = ContactLead.objects.all()\n    paginator = Paginator(leads, 20)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)\n    \n    context = {'leads': page_obj}\n    return render(request, 'leads/list.html', context)\n\n@login_required\ndef finance_dashboard(request):\n    # Monthly revenue calculation\n    today = datetime.now()\n    current_month_start = today.replace(day=1)\n    last_month_start = (current_month_start - timedelta(days=1)).replace(day=1)\n    \n    current_month_revenue = Payment.objects.filter(\n        payment_date__gte=current_month_start\n    ).aggregate(Sum('amount'))['amount__sum'] or 0\n    \n    last_month_revenue = Payment.objects.filter(\n        payment_date__gte=last_month_start,\n        payment_date__lt=current_month_start\n    ).aggregate(Sum('amount'))['amount__sum'] or 0\n    \n    # Calculate percentage change\n    if last_month_revenue > 0:\n        percentage_change = ((current_month_revenue - last_month_revenue) / last_month_revenue) * 100\n    else:\n        percentage_change = 100 if current_month_revenue > 0 else 0\n    \n    # Revenue breakdown\n    total_registration = Payment.objects.filter(payment_type='Registration').aggregate(Sum('amount'))['amount__sum'] or 0\n    total_admission = Payment.objects.filter(payment_type='Admission').aggregate(Sum('amount'))['amount__sum'] or 0\n    total_locker = Payment.objects.filter(payment_type='Locker').aggregate(Sum('amount'))['amount__sum'] or 0\n    total_monthly = Payment.objects.filter(payment_type='Monthly').aggregate(Sum('amount'))['amount__sum'] or 0\n    \n    total_revenue = total_registration + total_admission + total_locker + total_monthly\n    \n    # Recent payments\n    recent_payments = Payment.objects.all()[:10]\n    \n    context = {\n        'total_revenue': total_revenue,\n        'current_month_revenue': current_month_revenue,\n        'percentage_change': round(percentage_change, 1),\n        'total_registration': total_registration,\n        'total_admission': total_admission,\n        'total_locker': total_locker,\n        'total_monthly': total_monthly,\n        'recent_payments': recent_payments,\n    }\n    return render(request, 'finance/dashboard.html', context)\n","size_bytes":14897},"students/migrations/0001_initial.py":{"content":"# Generated by Django 5.2.6 on 2025-09-15 17:57\n\nimport django.core.validators\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='ContactLead',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField(max_length=254)),\n                ('mobile', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(regex='^\\\\+?1?\\\\d{9,15}$')])),\n                ('message', models.TextField(blank=True, null=True)),\n                ('status', models.CharField(choices=[('New', 'New'), ('Contacted', 'Contacted'), ('Interested', 'Interested'), ('Converted', 'Converted'), ('Not Interested', 'Not Interested')], default='New', max_length=20)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n            options={\n                'ordering': ['-created_at'],\n            },\n        ),\n        migrations.CreateModel(\n            name='Student',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField(max_length=254)),\n                ('mobile', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(regex='^\\\\+?1?\\\\d{9,15}$')])),\n                ('date_of_birth', models.DateField()),\n                ('aadhaar_number', models.CharField(max_length=12, validators=[django.core.validators.RegexValidator(regex='^\\\\d{12}$')])),\n                ('address', models.TextField()),\n                ('photo', models.ImageField(blank=True, null=True, upload_to='student_photos/')),\n                ('father_name', models.CharField(max_length=100)),\n                ('mother_name', models.CharField(max_length=100)),\n                ('parent_mobile', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(regex='^\\\\+?1?\\\\d{9,15}$')])),\n                ('registration_fees', models.DecimalField(decimal_places=2, default=200.0, max_digits=10)),\n                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive'), ('Expiring Soon', 'Expiring Soon')], default='Active', max_length=20)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n            options={\n                'ordering': ['-created_at'],\n            },\n        ),\n        migrations.CreateModel(\n            name='Payment',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('payment_date', models.DateField()),\n                ('payment_mode', models.CharField(choices=[('Cash', 'Cash'), ('Online', 'Online'), ('Card', 'Card'), ('UPI', 'UPI')], default='Cash', max_length=20)),\n                ('payment_type', models.CharField(choices=[('Registration', 'Registration Fees'), ('Admission', 'Admission Fees'), ('Locker', 'Locker Fees'), ('Monthly', 'Monthly Fees')], default='Registration', max_length=20)),\n                ('remarks', models.TextField(blank=True, null=True)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='students.student')),\n            ],\n            options={\n                'ordering': ['-payment_date'],\n            },\n        ),\n        migrations.CreateModel(\n            name='Locker',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('required', models.BooleanField()),\n                ('security_fees', models.DecimalField(decimal_places=2, default=300.0, max_digits=10)),\n                ('start_date', models.DateField()),\n                ('end_date', models.DateField()),\n                ('locker_number', models.CharField(max_length=10, unique=True)),\n                ('monthly_fees', models.DecimalField(decimal_places=2, default=100.0, max_digits=10)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lockers', to='students.student')),\n            ],\n            options={\n                'ordering': ['locker_number'],\n            },\n        ),\n        migrations.CreateModel(\n            name='Admission',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('start_date', models.DateField()),\n                ('end_date', models.DateField()),\n                ('hours', models.CharField(choices=[('1', '1 Hour'), ('2', '2 Hours'), ('3', '3 Hours'), ('4', '4 Hours'), ('6', '6 Hours'), ('8', '8 Hours')], default='2', max_length=2)),\n                ('slot_timing', models.CharField(choices=[('Morning', 'Morning (6:00 AM - 12:00 PM)'), ('Afternoon', 'Afternoon (12:00 PM - 6:00 PM)'), ('Evening', 'Evening (6:00 PM - 10:00 PM)'), ('Night', 'Night (10:00 PM - 6:00 AM)')], default='Morning', max_length=20)),\n                ('seat_number', models.CharField(max_length=10)),\n                ('seat_type', models.CharField(choices=[('Reserved', 'Reserved'), ('Non-Reserved', 'Non-Reserved')], default='Non-Reserved', max_length=20)),\n                ('admission_fees', models.DecimalField(decimal_places=2, default=1900.0, max_digits=10)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admissions', to='students.student')),\n            ],\n            options={\n                'ordering': ['-created_at'],\n            },\n        ),\n    ]\n","size_bytes":6611},"students/migrations/__init__.py":{"content":"","size_bytes":0}},"version":1}